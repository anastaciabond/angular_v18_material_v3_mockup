@use "@angular/material" as mat;
@use "assets/common/css/material-theme_purple/light";
@use "assets/common/css/material-theme_purple/dark";

@use "assets/common/helped-classes";
@use "assets/common/css/mat-chip-custom-title/mat-chip-custom-title.scss" as chip-custom-title;
@use "assets/common/css/mat-select-custom/mat-select-custom.scss" as mat-select-custom;


// Apply theme for the app. ************************************************************************************
$app-dark-theme: mat.define-theme((
  color: (
    theme-type: dark,
    //primary: mat.$violet-palette,
    //tertiary: mat.$green-palette,
    use-system-variables: true,
    system-variables-prefix: md-sys-color,
  ),
  typography: (
    brand-family: 'Roboto',
    bold-weight: 900,
  ),
  density: (
    scale: 0
  ),
));
$app-light-theme: mat.define-theme((
  color: (
    theme-type: light,
    //primary: mat.$azure-palette,
    //tertiary: mat.$orange-palette,
    use-system-variables: true,
    system-variables-prefix: md-sys-color,
  ),
  typography: (
    brand-family: 'Roboto',
    bold-weight: 900,
  ),
  density: (
    scale: 0
  ),
));

/*
Explanation of mat.get-theme-color method. There are two ways to use it (https://material.angular.io/guide/theming-your-components):
  - with three arguments to read tonal palette color based on principes of Material
    (https://m3.material.io/styles/color/system/how-the-system-works#3ce9da92-a118-4692-8b2c-c5c52a413fa6):
    mat.all-component-themes($theme, $palette, $hue), for ex. mat.all-component-themes($angular_v18_material_v3-theme, primary, 10);
    It creates static color, which is not affected by light/dark theme changing.
  - with two arguments to read a color role from predefined by Material (https://m3.material.io/styles/color/roles):
    mat.get-theme-color($theme, $role), for ex. mat.get-theme-color($angular_v18_material_v3-theme, on-primary-container).
    It gets the color, defined by light/dark theme and reacts on its change.
*/

@include mat.core();

// Defines DEFAULT THEME styles for your app.
:root {
  @include mat.all-component-themes($app-light-theme);
  @include mat.color-variants-backwards-compatibility($app-light-theme); // ??? Do we need it?
  // Custom theme mixins.
  @include chip-custom-title.theme($app-light-theme);
  //@include mat-select-custom.theme($app-light-theme);
}

// Defines dark theme if it is default operating system theme.
:root {
  @media (prefers-color-scheme: dark) {
    @include mat.all-component-colors($app-dark-theme);
    @include mat.all-component-typographies($app-dark-theme);
    // Founded that backwards-compatibility allows to use tertiary color from theme in some components (for ex. slide-toggle).
    @include mat.color-variants-backwards-compatibility($app-dark-theme); // ??? Do we need it?
    // Custom theme mixins.
    @include chip-custom-title.theme($app-dark-theme);
    //@include mat-select-custom.theme($app-dark-theme);
  }
}

// Will be realized later. *************************************************************************************
// Apply theme through adding CSS class to <body> tag to change it dynamically from theme service.
// html {
//   &.theme-light {
//     @include mat.core-theme($app-light-theme);
//   }
//   &.theme-dark {
//     @include mat.core-theme($app-dark-theme);
//   }
// }

// Rewrite theme tokens which do not meet custom theme. ********************************************************
:root {
  //   //--mdc-switch-track-shape: 9999px; // basic
  //   //--mdc-switch-track-shape: 0; // new value
  //   //--mat-form-field-filled-label-display: block;
  //   --mdc-extended-fab-label-text-size: 1rem;
    --mdc-filled-text-field-container-color: var(--md-sys-color-primary);
  }

// Reboot styles. ***********************************************************************************************
html, body {
  min-width: 100%;
  width: 100%;
  min-height: 100%;
  height: 100%;
}
body {
  font-family: Roboto, "Helvetica Neue", sans-serif;
  margin: 0;
  padding: 30px;
  height: 100%;
}
/* Change from `box-sizing: content-box` so that `width` is not affected by `padding` or `border`. */
*,
*::before,
*::after {
  box-sizing: border-box;
}
hr {
  margin: 1rem 0;
  color: inherit; // 1
  background-color: currentColor;
  border: 0;
  opacity: 0.25;
}

hr:not([size]) {
  height: 1px; // 2
}
/* Reset margins on paragraphs.
Similarly, the top margin on `<p>`s get reset. However, we also reset the
bottom margin to use `rem` units instead of `em`. */
p /*, h1, h2, h3, h4, h5, h6*/ {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
}


// Button density ready-to-go classes. Include this class in the block, which wraps the button. *********************
// .button-density-3 {
//   @include mat.button-density(-3);
// }
// .button-density-4 {
//   @include mat.button-density(-4);
// }
// .button-density-5 {
//   @include mat.button-density(-5);
// }

// **************************************************************************************************************

// Apply new custom design values for mat-slide-toggle in app-second component.
app-second {
  mat-slide-toggle {
    transform: scale(0.85);
    translate: -5px;
  }
}

// app-first-first .button-shadow-dom-styles {
//   background-color: rgb(57, 146, 146);
// }
