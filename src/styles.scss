@use "@angular/material" as mat;

// *************************************************************************************************************
// Angular v18 theming thru mat.define-theme mixin. ************************************************************
// *************************************************************************************************************

//@use "assets/common/css/material-theme_purple/light" as light;
//@use "assets/common/css/material-theme_purple/dark" as dark;

//@use "assets/common/helped-classes";
//@use "assets/common/css/mat-chip-custom-title/mat-chip-custom-title.scss" as chip-custom-title;
//@use "assets/common/css/mat-select-custom/mat-select-custom.scss" as mat-select-custom;

/*
// Apply theme for the app. ************************************************************************************
$app-dark-theme: mat.define-theme((
  color: (
    theme-type: dark,
    //primary: mat.$violet-palette,
    //tertiary: mat.$green-palette,
    use-system-variables: true,
    system-variables-prefix: md-sys-color,
  ),
  typography: (
    brand-family: 'Roboto',
    bold-weight: 900,
  ),
  density: (
    scale: 0
  ),
));
$app-light-theme: mat.define-theme((
  color: (
    theme-type: light,
    //primary: mat.$azure-palette,
    //tertiary: mat.$orange-palette,
    use-system-variables: true,
    system-variables-prefix: md-sys-color,
  ),
  typography: (
    brand-family: 'Roboto',
    bold-weight: 900,
  ),
  density: (
    scale: 0
  ),
));
*/

/*
Explanation of mat.get-theme-color method. There are two ways to use it (https://material.angular.io/guide/theming-your-components):
  - with three arguments to read tonal palette color based on principes of Material
    (https://m3.material.io/styles/color/system/how-the-system-works#3ce9da92-a118-4692-8b2c-c5c52a413fa6):
    mat.all-component-themes($theme, $palette, $hue), for ex. mat.all-component-themes($angular_v18_material_v3-theme, primary, 10);
    It creates static color, which is not affected by light/dark theme changing.
  - with two arguments to read a color role from predefined by Material (https://m3.material.io/styles/color/roles):
    mat.get-theme-color($theme, $role), for ex. mat.get-theme-color($angular_v18_material_v3-theme, on-primary-container).
    It gets the color, defined by light/dark theme and reacts on its change.
*/

/*
@include mat.elevation-classes();
@include mat.app-background();

// Defines DEFAULT THEME styles for your app.
:root {
  @include mat.all-component-themes($app-light-theme);
  @include mat.color-variants-backwards-compatibility($app-light-theme); // ??? Do we need it?
  // Custom theme mixins.
  @include chip-custom-title.theme($app-light-theme);
  //@include mat-select-custom.theme($app-light-theme);
}

// Defines dark theme if it is default operating system theme.
:root {
  @media (prefers-color-scheme: dark) {
    @include mat.all-component-colors($app-dark-theme);
    @include mat.all-component-typographies($app-dark-theme);
    // Founded that backwards-compatibility allows to use tertiary color from theme in some components (for ex. slide-toggle).
    @include mat.color-variants-backwards-compatibility($app-dark-theme); // ??? Do we need it?
    // Custom theme mixins.
    @include chip-custom-title.theme($app-dark-theme);
    //@include mat-select-custom.theme($app-dark-theme);
  }
}
*/

// Will be realized later. *************************************************************************************
// Apply theme through adding CSS class to <body> tag to change it dynamically from theme service.
// html {
//   &.theme-light {
//     @include mat.core-theme($app-light-theme);
//   }
//   &.theme-dark {
//     @include mat.core-theme($app-dark-theme);
//   }
// }

// Rewrite theme tokens which do not meet custom theme. ********************************************************
//:root {
//   //--mdc-switch-track-shape: 9999px; // basic
//   //--mdc-switch-track-shape: 0; // new value
//   //--mat-form-field-filled-label-display: block;
//   --mdc-extended-fab-label-text-size: 1rem;
//  --mdc-filled-text-field-container-color: var(--md-sys-color-primary);
//}

// *************************************************************************************************************
// END Angular v18 theming thru mat.define-theme mixin. ********************************************************
// *************************************************************************************************************



// *************************************************************************************************************
// Angular v19 theming thru mat.theme() mixin. *****************************************************************
// *************************************************************************************************************
html {
  color-scheme: light;
  @include mat.theme((
    //'Color' parameter is commented because we use custom tokens thru mat.theme-overrides mixin without creating palette.
    //color: mat.$orange-palette,
    typography: Roboto,
    density: 0
  ));
  @include mat.theme-overrides((
    primary: rgb(142 0 74),
    surface-tint: rgb(184 6 98),
    on-primary: rgb(255 255 255),
    primary-container: rgb(201 30 111),
    on-primary-container: rgb(255 255 255),
    secondary: rgb(155 62 97),
    on-secondary: rgb(255 255 255),
    secondary-container: rgb(255 152 185),
    on-secondary-container: rgb(88 5 45),
    tertiary: rgb(137 30 0),
    on-tertiary: rgb(255 255 255),
    tertiary-container: rgb(196 56 17),
    on-tertiary-container: rgb(255 255 255),
    error: rgb(186 26 26),
    on-error: rgb(255 255 255),
    error-container: rgb(255 218 214),
    on-error-container: rgb(65 0 2),
    background: rgb(225, 197, 208),
    on-background: rgb(38 24 28),
    surface: rgb(255 248 248),
    on-surface: rgb(38 24 28),
    surface-variant: rgb(253 218 226),
    on-surface-variant: rgb(89 64 71),
    outline: rgb(140 112 119),
    outline-variant: rgb(224 190 198),
    shadow: rgb(0 0 0),
    scrim: rgb(0 0 0),
    inverse-surface: rgb(60 44 48),
    inverse-on-surface: rgb(255 236 239),
    inverse-primary: rgb(255 177 200),
    primary-fixed: rgb(255 217 226),
    on-primary-fixed: rgb(62 0 29),
    primary-fixed-dim: rgb(255 177 200),
    on-primary-fixed-variant: rgb(142 0 74),
    secondary-fixed: rgb(255 217 226),
    on-secondary-fixed: rgb(62 0 29),
    secondary-fixed-dim: rgb(255 177 200),
    on-secondary-fixed-variant: rgb(125 38 73),
    tertiary-fixed: rgb(255 219 210),
    on-tertiary-fixed: rgb(60 8 0),
    tertiary-fixed-dim: rgb(255 180 161),
    on-tertiary-fixed-variant: rgb(137 30 0),
    surface-dim: rgb(238 212 217),
    surface-bright: rgb(255 248 248),
    surface-container-lowest: rgb(255 255 255),
    surface-container-low: rgb(255 240 242),
    surface-container: rgb(255 232 237),
    surface-container-high: rgb(252 226 231),
    surface-container-highest: rgb(246 220 226),
  ));
}
// Set background and text color due to Angular v19.
.app-background {
  background: var(--mat-sys-background);
  color: var(--mat-sys-on-background);
}

// Reboot styles. ***********************************************************************************************
html, body {
  min-width: 100%;
  width: 100%;
  min-height: 100%;
  height: 100%;
}
body {
  font-family: Roboto, "Helvetica Neue", sans-serif;
  margin: 0;
  padding: 30px;
  height: 100%;
}
/* Change from `box-sizing: content-box` so that `width` is not affected by `padding` or `border`. */
*,
*::before,
*::after {
  box-sizing: border-box;
}
hr {
  margin: 1rem 0;
  color: inherit; // 1
  background-color: currentColor;
  border: 0;
  opacity: 0.25;
}

hr:not([size]) {
  height: 1px; // 2
}
/* Reset margins on paragraphs.
Similarly, the top margin on `<p>`s get reset. However, we also reset the
bottom margin to use `rem` units instead of `em`. */
p, h1, h2, h3, h4, h5, h6 {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
}
// **************************************************************************************************************

// For overriding styles in Emulated encapsulation.*************************************************************
app-component-mat-select {
  .mdc-text-field {
    padding: 0 var(--cl-mdc-text-field-padding, 16px);
  }
}
// END For overriding styles in Emulated encapsulation.*********************************************************
